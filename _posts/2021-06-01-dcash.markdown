---
layout: post
title:  DCash
date:   2021-06-01 00:00:00 +0000
image:  dcash-main.png
tags:   Dev
---
<h1 style="color:#022851;">Project Details</h1>

<a href="https://github.com/jgabatin/DCash" target="_blank" rel="noopener noreferrer">DCash</a> is a CLI program that mimics a digital wallet through five commands: auth, balance, deposit, send, and logout. The client (DCash) fetches data from a local web server (Gunrock) that maintains a database encapsulating users, deposits, and transfers. The server and client interact with Stripe via HTTP requests in order to charge cards that credit an authenticated user’s balance. 

<b style="color:#022851;">TOPICS:</b> Distributed Systems, HTTP/1.1 & SSL, REST API       
<b style="color:#022851;">TEAM:</b> Solo   
<b style="color:#022851;">TIME:</b> 26 Hours  
<b style="color:#022851;">TOOLS:</b> C++, RapidJSON, Stripe   

<h1 style="color:#022851;">Overview</h1>

This project was the last assignment for my operating systems course, ECS 150. Thankfully, my professor was nice enough to provide his students with a functional web server to meet the two week deadline. While I’m fairly comfortable with C++ and object-oriented programming, it was my first time working with Stripe payments and RESTful principles. The assignment objective was to gain hands-on experience with distributed systems by implementing the API services on the server-side and creating the DCash client to interact with both Gunrock and Stripe. 

<h1 style="color:#022851;">Functionality</h1>

Detailed documentation and specifications regarding architecture, services, and utilities can all be found <a href="https://github.com/kingst/gunrock_web/tree/main/docs" target="_blank" rel="noopener noreferrer">here</a>.

Here's a simplified example of a deposit request from the user (assuming they are authenticated):

<b>1. DCash Input</b>
{% highlight shell %}
D$> deposit 20.00 4242424242424242 2024 05 242
{% endhighlight %}

<b>2. Stripe Response</b>
{% highlight json %}
{
  "id": "tok_1J5IFeAthIUUdRayQtztqSGR",
  "object": "token",
  "card": {
  "id": "card_1J5IFeAthIUUdRayS1fBtJsa",
  "object": "card",
  "address_city": null,
  "address_country": null,
  "address_line1": null,
  "address_line1_check": null,
  "address_line2": null,
  "address_state": null,
  "address_zip": null,
  "address_zip_check": null,
  "brand": "Visa",
  "country": "US",
  "cvc_check": "pass",
  ...
}
{% endhighlight %}

<b>3. Gunrock Request</b>
{% highlight shell %}
$ curl -H 'x-auth-token: 2-fobvOk3LXY7v_6NYeuDnTu' http://localhost:8080/deposits -d amount=2000 -d stripe_token=tok_1J5IFeAthIUUdRayQtztqSGR
{% endhighlight %}

<b>4. Stripe Response</b>
{% highlight json %}
{
  "id": "ch_1J5IFZAthIUUdRayS0MjWtzZ",
  "object": "charge",
  "amount": 2000,
  "amount_captured": 0,
  "amount_refunded": 0,
  "application": null,
  "application_fee": null,
  "application_fee_amount": null,
  "balance_transaction": "txn_1J5ITqAthIUUdRayyerI911F",
  ...
}
{% endhighlight %}

<b>5. Gunrock Output</b>
{% highlight json %}
{
    "balance": 2000,
    "deposits": [
        {
            "to": "john",
            "amount": 2000,
            "stripe_charge_id": "ch_1J5IFZAthIUUdRayS0MjWtzZ"
        }
    ]
}
{% endhighlight %}

<b>6. DCash Output</b>
{% highlight shell %}
D$> deposit 20.00 4242424242424242 2024 05 242
Balance: $20.00
D$>
{% endhighlight %}

<br>

<h1 style="color:#022851;">Reflection</h1>

Since working with Stripe was a first for me, I spent the majority of my time reading the <a href="https://stripe.com/docs/api/tokens/create_card" target="_blank" rel="noopener noreferrer">Tokens</a> and <a href="https://stripe.com/docs/api/charges/create" target="_blank" rel="noopener noreferrer">Charges</a> documentation to make sure I had a basic understanding of their API. This was essential in planning the control flow for my deposit service, knowing that a small mistake (like omitting a ‘.’) in real life could put a user in a financially frustrating situation! It wasn’t until I was confident in the underlying concepts did I look over the starter code that was provided. Layers of abstraction and helper functions made this another time consuming task, but I found that reading through the files allowed me to find the necessary tools to efficiently service the HTTP requests and parse HTTP responses (RapidJSON is great). After implementing the authentication service, it fortunately did not take me long to add account, deposit, and transfer CRUD methods to support the DCash client.

There are some ideas that come to mind as it concerns improvements in performance and scalability. If DCash was intended to support multiple requests from multiple users, then implementing multithreading for Gunrock would definitely be a top priority. Additionally, replacing the limited and volatile in-memory ‘Database’ class with a RDBMS like MySQL would be the next task in meeting modern software standards. While debugging a multithreaded server would be as fun as waiting in line at the DMV, it would surely be an interesting exercise for a future project.


